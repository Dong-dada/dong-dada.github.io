---
layout: post
title:  "《软件调试》 学习 21 调试符号"
date:   2017-06-18 00:46:30 +0800
categories: debugging
---

* TOC
{:toc}

在软件调试中，调试符号 (Debug Symbols) 是将被调试程序的二进制信息与源程序信息联系起来的桥梁。很多重要的调试功能都必须要有调试符号才能够工作，比如源代码调试、栈回溯、按名称显示变量等。

从软件编译的角度看，调试符号是编译器在编译过程中，为支持调试而收录的调试信息。这些调试信息所描述的目标包括：变量、类型、函数、标号、源代码行等。

调试符号是在编译过程中逐步收集和提炼出来的，最后由链接器或专门工具保存到调试符号文件中。Visual Studio 编译器默认将调试符号保存到单独的文件中，即 PDB 文件。PDB 是 Program Database 的缩写，意思是用来描述源程序的数据库。

微软没有暴露 PDB 的结构，而是提供了两种方式来访问符号文件中的符号。一种是 DbgHelp 函数库，另一种是 DIA SDK(Debug Interface Access)。


## 名称修饰

一个完整的函数声明包括 返回值类型、调用协议名称、函数名称、参数信息等若干个部分。为了把这些信息都记录在一个字符串中以便标识和组织一个函数，VC 编译器使用了名称修饰 (Name Decoration) 技术。其宗旨就是将函数的本来名称、调用协议、返回值等信息按照一定规则编排成一个新的名字，称为修饰名称 (Decorated Name)。

例如下面分别是 TestTry 函数的原型和它的修饰名称：

```
int TestTry(HWND hWnd, int n);
?TestTry@@YAHPAUHWND__@H@Z
```

与修饰前的名称相比，修饰后的名称不再包含空格和括号这些不便于存储的分隔符，而是将多个部分合并成单一的连贯整体，因此名称修饰有时候也被称为名字碾平 (Name Mangling) 或名称粉碎。

观察编译生成的汇编文件可以看到修饰后的名称，你可以在 VS 中通过 Properities --> C/C++ --> OutputFiles --> Assembler Output 来告知编译器输出汇编文件。

另外，使用 DbgHelp 中的 UnDecorateSymbolName 函数可以把一个修饰过的符号名翻译称为本来的名字，不过这个函数不能从修饰名中解析出函数原型中的其他信息，如参数和返回值等。

### C 和 C++

首先 C 和 C++ 编译器使用的名称修饰规则是不同的，这意味着一个同样的函数，在 C 和 C++ 编译器中会修饰为不同的名称，例如 `void __cdecl test(void)` 函数，在 C 中会被修饰为 `_test`, 而按照 C++ 规范编译产生的修饰名称是 `?test@@ZAXXZ`。

因为链接器链接目标文件 (.obj 文件) 时是使用修饰名称来链接的，如果调用方和被调用方使用的编译规范不同，链接时就会出现以下错误：

```
error LNK2001: unresolved external symbol "void __cdecl test(void)" (?test@@ZAXXZ)
```

VC 编译器默认按照文件扩展名来选择对应的编译器，`.c` 后缀的文件使用 C 编译器，`.cpp` 或 `.cxx` 后缀的文件使用 C++ 编译器。不过你也可以使用如下的编译开关来手动选择编译器：
- /Tc 后面跟文件名，则强制该文件使用 C 编译器；
- /Tp 后面跟文件名，则强制改文件使用 C++ 编译器；
- /TC 指定所有文件都使用 C 编译器；
- /TP 指定所有文件都使用 C++ 编译器；

在 C++ 中， `extern "C"` 关键字生命使用 C 的名称修饰规则。

### C 的名称修饰规则

第一，对于使用 C 调用协议 `__cdecl` 的函数，在函数名称前加一个下划线；

第二，对于使用快速调用协议 `__fastcall` 的函数，在函数名称的前后各加一个 @ 符号，后面跟参数的长度，不考虑返回值。例如 `extern "C" int __fastcall Test(int n)` 修饰后的名称为 `@Test@4`;

第三，对于使用标准调用协议 `__stdcall` 的函数，在函数名称前加一个下划线，名称后面加一个 @ 符号，后面跟参数的长度，不考虑返回值。例如 `extern "C" int __stdcall Test(int n, int m)` 修饰后的名称为 `_Test@8`;

### C++ 的名称修饰规则

因为 C++ 要支持类和命名空间等特征，其修饰名称中必须考虑类名和命名空间信息，所以它的规则要复杂一些。

C++ 标准没有定义统一的名称修饰规则，因此不同编译器使用的规则是不一样的，即使是同一种编译器，不同版本间可能也会有差异。

以 VC++ 编译器为例，C++ 的名称修饰规则为：
1. 问号前缀；
2. 函数名称，构造函数和析构函数具有特别的名称，分别是 ?0 和 ?1, 运算符重载也具有特别的名称，例如 new, delete, =, +, ++ 的名称分别为 ?2, ?3, ?4, ?H, ?E;
3. 如果名称不是 ?0 这样的特殊函数名，那么加一个分隔符 @
4. 如果是类的方法，那么从所属类开始依次加上类名和父类名，每个类名后面跟一个 @ 符号。所有类名都加好之后，再加一个 @ 符号，接着加上字符 Q 或 S(静态方法)。如果不是类的方法，那么直接加上 @；
5. 调用协议的代码，C 调用协议的代码为 A，`__fastcall` 的代码为 I, `__stdcall` 的代码为 G。对于类方法，调用协议前面会加一个字符 A，this 调用协议的代码为 E；
6. 返回值编码，例如字符 H 表示整数类型的返回值；
7. 参数列表编码，以 @ 结束，细节从略；
8. 后缀 Z；

可以看出 C++ 的修饰名都是以 ? 开头，以 Z 结尾的，这可以作为与 C 修饰名区分的方法。

 