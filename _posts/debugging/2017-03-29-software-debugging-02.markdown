---
layout: post
title:  "《软件调试》 学习 02 中断和异常"
date:   2017-03-29 16:07:30 +0800
categories: debugging
---

 
 

## 基本知识

CPU 工作时，无论把它的 指令指针(IP) 指向哪个内存地址，它都会试图执行那里的指令，执行完一条，再取下一条执行，如此往复。为了能够让 CPU 能够暂时停下当前的任务，转去处理突发事件或其他需要处理的任务，人们设计了中断 (interrupt) 和 异常(exception) 机制。

### 中断

中断通常是由 CPU 外部的输入输出设备(硬件)所触发的，供外部设备通知 CPU "有事情需要处理", 因此又叫做中断请求 (Interrupt Request)。中断请求的目的是希望 CPU 暂时停止当前正在执行的程序，转去执行中断处理例程(Interrupt Service Routine, 简称 ISR)。

中断机制为 CPU 和外部设备之间的通信提供了一种高效的方法，有了中断机制， CPU 就不必去频繁地查询外部设备的状态了，因为当外部设备有 “事” 需要 CPU 处理时，它可以发出中断请求通知 CPU，但是如果有太多的设备都向 CPU 发请求，那么也会导致 CPU 频繁地在各个中断处理例程之间“奔波”，从而影响正常程序的执行。

在硬件级，中断是有一块专门芯片来处理的，通常称为中断控制器(Interrupt Controller)。它负责分配中断资源和管理各个中断源发出的中断请求。你可以在 Windows 的设备管理器中看到会发出中断请求的所有设备：

![]( {{ site.url }}/asset/software-debugging-interrupt-request.png)

### 异常

与中断不同，异常通常是由 CPU 在执行指令时因为检测到预先定义的某个(或多个)条件而产生的同步事件。

异常的来源有三种：
- 第一种是程序错误，即当 CPU 在执行程序指令时遇到操作数有错误或检测到指令规范中定义的非法情况。例如除零，或者在用户模式下执行特权指令。
- 第二种是某些特殊指令，这些指令的预期行为就是产生响应的异常，比如 INT 3 指令，该指令的目的就是产生一个断点异常，让 CPU 中断 (break) 进调试器。换句话说，这个异常时“故意”产生的。这样的指令还有 INTO, INT n, BOUND；
- 第三种是 CPU 自身的机器检查异常(Machine Check Exception), 当 CPU 执行指令期间检测到 CPU 内部或外部的硬件错误，也会抛出异常；


## 异常的分类

根据 CPU 报告异常的方式和导致异常的指令是否可以安全地重新执行，IA-32 CPU 把异常分为三类：错误(Fault), 陷阱(Trap), 中止(Abort)；

### 错误类异常

错误类异常一般可以被修正，并且修正后程序可以无损地恢复执行。

这类异常最常见的就是内存页错误(page fault)。这种 异常几乎每时每刻都在发生，因为内存页错误异常时虚拟内存技术的基础。操作系统会把暂时不用的内存以页为单位交换到硬盘上。当有程序访问到这些不再物理内存中的页的时候，就会引发一个页错误异常（有时简称为缺页错误或缺页异常），并转去执行该异常的处理程序，后者会调用内存管理器的函数把对应的内存页交换回物理内存，然后再让 CPU 返回到导致该异常的那条指令处恢复执行。当第二次执行刚才导致异常的指令时，因为内存页已经放到了物理内存中，因此不会继续产生异常。

错误类异常发生后，CPU 会把自己的状态恢复成异常发生前的状态，然后将导致该异常的指令存储到寄存器 CS 和 EIP 中，接着 CPU 抛出异常，异常处理结束后，CPU 会从 CS 和 EIP 中取出刚刚的指令再次执行，如果异常已经被解决，那么就不会再次引发异常，如果没被解决，异常会再次触发。

### 陷阱类异常

与错误类异常不同，陷阱类异常发生后，CPU 会保持现状，并把要执行的下一条指令存在寄存器 CS 和 EIP 中，然后抛出异常，待异常处理结束后，继续执行接下来的指令。

比如 INT3 指令导致的断点异常就属于陷阱类异常，该异常会导致 CPU 中断到调试器，从调试器返回后，被调试程序可以继续执行。

### 中止类异常

中止类异常用于报告严重错误，比如硬件错误和系统表中包含非法值等。这类异常不允许恢复继续执行。


## 中断/异常 处理

尽管中断和异常从产生的来源上来看有着本质的区别，但是系统(CPU 和 操作系统)是用统一的方法来响应和管理它们的。中断和异常处理的核心数据结构是中断描述符表(Interrupt Descriptor Table, 简称 IDT)。当中断和异常发生时，CPU 会从这个表里查找到该中断/异常所对应的处理例程。这个查找过程是在 CPU 内部进行的。通常，系统软件(操作系统或者 BIOS 固件)在系统初始化阶段就准备好中断处理例程和 IDT 表，然后把 IDT 表的位置通过 IDTR(IDT Reigster)寄存器告诉 CPU。

只有在 Ring0 下才可以执行操作 IDTR 寄存器的指令，因此可以保证 IDT 表不被破坏。