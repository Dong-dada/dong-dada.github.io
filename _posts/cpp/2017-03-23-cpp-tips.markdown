---
layout: post
title:  "C/C++ 小知识点"
date:   2017-03-23 16:18:30 +0800
categories: cpp
---

* TOC
{:toc}

## bad_div 问题：

这个知识点来自于 《软件调试》 1.6.1 节。请看下面的代码：

```c
int bad_div(int m, unsigned int n)
{
	return m/n;
}

int main()
{
	printf("%d\n", bad_div(-6, 3));
	// 错误！输出 1431655763

	return 0;
}
```

上述代码出错的原因在于，出错的原因在于参数 `n` 是一个无符号整数，编译器在编译 `m/n` 时采用了无符号除法指令 DIV, 这相当于假设参数 `m` 也是无符号整数，从而导致了意外的结果。


## 利用 ostringstream 进行字符串格式化

有时候想打 log, 需要进行字符串格式化，使用 sprintf 比较麻烦(需要建立 buffer, 需要写参数格式), 可以利用 `std::ostringstream` 来实现:

```cpp
void foo(int param1, const char* param2, double param3)
{
	std::ostringstream log_str;
	log_str << "[foo] " << "param1:" << param1 << ", param2:" << param2 << ", param3:" << param3;
	OutputDebugStringA(log_str.str().c_str())

	// ...
}
```


## vector 的 emplace_back 方法

`std::vector` 中有一个 `emplace_back()` 方法，其效果跟 `push_back()` 类似，但前者可以就地构造对象，而无需进行拷贝操作，比如：

```cpp
struct Foo
{
	Foo(int x, int y) : 
		x(x), y(y)
	{
	}

	int x;
	int y;
};

int main()
{
	std::vector<Foo> vec;

	// 会有一次拷贝构造过程
	vec.push_back(Foo(1, 3));

	// 就地构造，无需拷贝
	vec.emplace_back(2, 4);

	return 0;
}
```

其它标准容器也提供了类似的 `emplace` 方法，可以就地插入新的元素。大部分情况下，都应该使用 `emplace()` 系列函数来代替插入操作，避免不必要的拷贝操作。