---
layout: post
title:  "git - 小知识点"
date:   2017-09-22 10:38:30 +0800
categories: other
---

* TOC
{:toc}

## 配置 difftool 和 mergetool

在 git 里配置 difftool 和 mergetool, 这样可以用外部工具来查看修改，现在用的是 Araxis Merge, 配置如下：

```
[diff]
tool = araxis
[difftool "araxis"]
path = C:\\Program Files\\Araxis\\Araxis Merge\\compare.exe

[merge]
tool = araxis
[mergetool "araxis"]
path = C:\\Program Files\\Araxis\\Araxis Merge\\compare.exe
```

也可以用命令来配置：

```
git config --global difftool=araxis
git config --global diff.tool.araxis="C:\\Program Files\\Araxis\\Araxis Merge\\compare.exe"

git config --global mergetool=araxis
git config --global merge.tool.araxis="C:\\Program Files\\Araxis\\Araxis Merge\\compare.exe"
```

配置完了之后就可以在 diff 的时候使用 `git difftool` 和 `git mergetool` 命令来打开 Araxis Merge 工具来比较了。

如果不想执行 `git difftool` 的时候，每次比较一个文件都需要确认 `y/n`, 那么可以执行 `git difftool -y`。或者进行如下设置：

```
git config --global difftool.prompt false
```


## 本地版本回退

`git reset` 命令可以用来把代码回退到某次 commit 时的版本，比如现在有下面三个提交：

![]( {{site.url}}/asset/git-tips-reset-hard.jpg )

现在想回退回上一个版本，看看上一个版本里改了啥，可以使用如下命令：

```
git reset --hard HEAD^
```

注意 `HEAD` 后面的 `^` 符号，它表示 `HEAD` 的上一个 `commit`, 如果是两个 `^^`, 就表示上上一次的 `commit`;

执行上述命令后，`HEAD` 指针会指向上一次 `commit` 的位置：

![]( {{site.url}}/asset/git-tips-reset-hard-done.jpg )

注意，这个时候去查看提交日志，会发现你已经找不到之前最新的那个 commit 了：

```
$ git log --pretty=oneline
a7286fb28d8b5f885b86ac09a34fe8d934b4f91d (HEAD -> master) add distributed
5d0fc76d9522a9a73ef4a88eddc60ffaad2729d0 write a readme file
```

这个跟 `--hard` 参数有关，稍后再讲。

切换到之前的版本看了一下之后，现在想回到最新的提交那儿，也可以用 `git reset` 命令，后面跟 `commit id`, 但问题是现在 git log 里没有最新提交的记录了，怎么知道 commit id 呢？可以使用 `git reflog`, 它会记录你的每一次命令:

```
$ git reflog
a7286fb (HEAD -> master) HEAD@{2}: reset: moving to HEAD^
60fe97a HEAD@{3}: commit: append GPL
a7286fb (HEAD -> master) HEAD@{4}: commit: add distributed
5d0fc76 HEAD@{5}: commit (initial): write a readme file
```

可以看到 `commit id` 是 `60fe97a`, 那么运行 `git reset --hard 60fe97a` 就可以回到那个版本了。

### 如果在回退时，本地有未提交的修改会怎么样？

使用了 `git reset --hard` 进行回退的话，本地未提交的修改会被**删除**, 不管这些修改有没有被 `git add` 到暂存区，这些记录都会消失。

为了避免未提交的修改被删除，可以先通过 `git stash save` 把这些修改放到 stash 里，接着在需要的时候通过 `git stash apply` (不会删掉 stash 里的东西) 或者 `git stash pop` (会删除 stash 里的记录) 来把之前未提交的修改恢复到工作目录里。

或者采用如下的办法：

### 如果我只是想回退  commit 记录，不想回退本地代码怎么办？

比如某次提交之后发现，提交的内容有问题，这时候你需要把这次提交回退掉，然后把本地的代码修改为正确之后再次提交。

这个时候可以使用 `git reset --mixed` 命令，`--mixed` 与 `--hard` 参数不同，`--hard` 会在回退的过程中把工作区里的内容也一并回退掉，而 `--mixed` 则不会改动工作区，只是把 HEAD 和索引(现在还不懂 Index 是啥)移动到了指定的位置；


## cherry-pick

git cherry-pick可以选择某一个分支中的一个或几个commit(s)来进行操作。例如，假设我们有个稳定版本的分支，叫v2.0，另外还有个开发版本的分支v3.0，我们不能直接把两个分支合并，这样会导致稳定版本混乱，但是又想增加一个v3.0中的功能到v2.0中，这里就可以使用cherry-pick了,其实也就是对已经存在的commit 进行再次提交.

剩下的可以查看 [这篇文章](http://www.jianshu.com/p/08c3f1804b36)


## 如何删除远程仓库上的提交

如果把一些保密的数据提交到 GitHub 了，怎么删除 GitHub 上的这次提交呢？

首先，在本地删掉这个提交，具体可以查看之前 版本回退 的章节，使用 `git reset --hard HEAD^` 命令，撤销最近一次提交。

然后，使用如下命令：

```
git push origin +master
```

比平时的 `git push` 命令多了一个 `+`, 它表示强制更新。

完事儿之后就可以删除远程仓库上的提交了。


## 每次往 github 上提交内容都需要输密码，很麻烦，可以去掉吗？

虽然在设置了 SSH key 到 github 上，但每次 `git push` 还是要输入用户名密码，挺奇怪的。

原因是 `git clone` 的时候用的是 HTTPS 而不是 SSH 协议，所以配置的 SSH key 不起作用了。

解决办法就是把协议换成 SSH 的：

```
git remote -v           // 查看远程地址
git remote rm origin    // 删除原有的推送地址
git remote add origin git@github.com:username/repository.git    // 设置新的推送地址
```


## 分支操作

```
// 创建一个本地分支
git branch <branch_name>

// 切换到某个本地分支上
git checkout <branch_name>

// 创建一个本地分支，然后切换到它上面
git checkout -b <branch_name>

// 创建一个本地分支，它跟踪指定的远程分支，然后切换到这个本地分支上
git checkout -b <local_branch_name> <remote_branch_name>

// 删除本地分支(已经合并过代码的分支)
git branch -d <branch_name>

// 删除本地分支(强制删除)
git branch -D <branch_name>

// 将本地分支推送到远程仓库上
git push <远程主机名> <本地分支名>:<远程分支名>
git push origin feature-xxx:feature-xxx

// 删除远程仓库的远程分支
git push origin --delete feature-xxx
```

经常会遇到这种情况，在 master 上开发了一些代码，然后发现这些代码需要新开分支来提交。但如果这时候切换到新建的分支上的话，会因为本地有没提交的代码而导致提交失败。这个时候可以使用 `git stash save` 命令暂存本地的修改，切换完成后再通过 `git stash pop` 将修改还原到新分支上。


## pretty log

直接使用 `git log` 命令查看日志，打印的结果可读性不太好，或者日志太多了，打不下。这时候可以设置 pretty 选项来对输出的日志进行格式化：

```
git log --pretty=format:'%Cred%h%Creset - %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
```

其中的 `%h` 表示 hash id, `%Cred`, `%Cgreen` `%Creset` 用来设置颜色, `%s` 表示 commit 标题。具体可以参考 [这篇文章](https://ruby-china.org/topics/939)。

每次输这么长有点儿麻烦，可以用如下命令来为上述命令起一个别名 lg:

```
git config --global alias.lg "log --color --pretty=format:'%Cred%h%Creset - %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
```

也可以编辑 `C:\Users\Administrator\.gitconfig` 文件，新增如下条目：

```
[alias]
    lg = log --color --pretty=format:'%Cred%h%Creset - %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
```


## 分支的合并

要合并分支，比如把 `feature-test` 合并到 `master`, 需要首先切换到 `master` 目标分支上，然后使用 `git merge feature-test` 命令把来源分支 `feature-test` 的代码合并到 `master`:

```
git checkout master
git merge feature-test
```

当然，合并的过程可能会有冲突：

```
$ git merge feature-test
Auto-merging readme.md
CONFLICT (content): Merge conflict in readme.md
Automatic merge failed; fix conflicts and then commit the result.
```

出现冲突可以通过 `git mergetool` 来解决冲突：

![]( {{site.url}}/asset/git-tips-mergetool.png )

我配置的 mergetool 是 Araxis Merge, 它的 merge 分为三个部分，左边是当前分支 `master` 的代码，中间是基准代码，右侧则是来源分支 `feature-test` 的代码。你可以选择把左边和右边的代码都合并到中间，也可以选择把左边的代码合并到右边，或者反之。退出 merge 界面之后，Araxis 会询问你需要保存哪个。

通过 Araxis Merge 解决完所有冲突后，再看下此时的状态：

```
$ git status
On branch master
All conflicts fixed but you are still merging.
  (use "git commit" to conclude merge)

Changes to be committed:

        modified:   readme.md
```

可以看到所有的冲突都解决了，但仍处于 merging 状态，还需要使用 `git commit` 把冲突解决的结果提交一下。

因此 `git merge` 完成之后，`master` 分支上会多出来一条提交记录，用于记录此次分支合并操作：

```
git lg -10
0128b08 - Merge branch 'feature-test' (7 seconds ago)
03dbc0e - master edit 2 (14 minutes ago)
652ed8a - feature edit (17 minutes ago)
ecbaa08 - master edit (47 minutes ago)
```


## git merge 的 fast forward 选项

`git merge` 命令有两个选项 `--ff` 和 `--no-ff`, 分别用来指定是否使用 fast forward 来进行分支合并。

### 什么是 fast forward

fast forward 是快进的意思，且看下图：

![]( {{site.url}}/asset/git-tips-fast-forward.png )

bugfix 分支是从 master 分支上拉出来的，在 bugfix 分支提交了一些东西之后，需要把 bugfix 合并到 master 上。

此时 master 分支上没有新建任何提交，对于 git 来说，它只需要把 master 分支的指针直接指到 bugfix 分支的最新提交上就可以了。这种操作就叫快进 fast forward ：

![]( {{site.url}}/asset/git-tips-fast-forward-2.png )

在这种情况下，会生成如下提交记录：

![]( {{site.url}}/asset/git-tips-fast-forward-3.png )

看起来跟 rebase 有点像。

### 如果不能 fast forward 会怎么样？

如果 merge 的时候 master 有新的提交，那么之前的快进操作就无法执行了：

![]( {{site.url}}/asset/git-tips-fast-forward-4.png )

这种情况下会在 master 分支下产生一个新的 commit:

![]( {{site.url}}/asset/git-tips-fast-forward-5.png )

这种情况下，会生成如下提交记录：

![]( {{site.url}}/asset/git-tips-fast-forward-6.png )

### --no-ff 选项，禁止  fast forward

你可以给 `git merge` 加上一个选项 `--no-ff`, 也就是不要进行 fast forward.

这样的话，即使 master 分支没有新增 commit, 也不会进行快进，而是生成一个新的 commit.

### 什么时候使用  --no-ff 选项呢？

使用 `--no-ff` 选项的优点是它不会把 feature 中的提交记录带入到 master 里面，可以让 master 的提交记录更清晰一些。

如果往 master 合代码都使用 `--no-ff` 选项，那么 master 的提交记录里只会有 `merge branch feature-xxx` 这样的记录，比较简洁。


## 标签 tag

git 可以给某个 commit 打上标签，以示重要。

与标签有关的命令如下：

```sh
git tag                 // 列出标签
git tag -l 'v1.8.5.*'   // 列出以 v1.8.5. 开头的标签

git tag -a v1.4 -m 'my version 1.4'     // 为当前 commit 打上标签，v1.4 是标签的名字，-m 后面是标签的注释

git tag -a v1.5 9fceb02                 // 为指定 commit 打上标签，不写 -m 的话，会弹出编辑器让你输入注释

git show v1.4           // 显示某个标签的信息，包括日期、注释、commit id

git push origin v1.4    // 向远程分支 push 标签
```

### checkout 标签

在 Git 中你并不能真的检出一个标签，因为它们并不能像分支一样来回移动。 如果你想要工作目录与仓库中特定的标签版本完全一样，可以使用 `git checkout -b [branchname] [tagname]` 在特定的标签上创建一个新分支：

```sh
$ git checkout -b version2 v2.0.0
Switched to a new branch 'version2'
```

当然，如果在这之后又进行了一次提交，version2 分支会因为改动向前移动了，那么 version2 分支就会和 v2.0.0 标签稍微有些不同，这时就应该当心了。


## rebase 在分支合并中的使用

先说明一点，branch 只是一个指针，删除一个分支并不意味着这个分支下的所有 commit 都会删除，只是删掉了分支指针而已。

使用 `git merge` 进行完分支合并后，一般会生成一个新的 merge commit. 这个 commit 只是一个标识，而不是把所有 commit 的内容打包在一起形成一个新的提交。这意味着合并分支完成后，之前的所有 commit 都还在：

![]( {{site.url}}/asset/git-tips-merge.png )

即使删掉分支，commit 也是在的：

![]( {{site.url}}/git-tips-delete-branch.png )

上图的提交记录，有点不太好看，两个分支在并行开发，后面再去读的时候，容易在两个分支间跳来跳去。

所以可以在 merge 之前，先把 master 的内容 rebase 到 feature 分支上：

```
git checkout feature_01
git rebase master
```

rebase 操作将首先跳到 master 分支的最新 commit 上，然后基于它把 feature_01 上的所有 commit 依次重放一遍。重放的过程中可能有冲突需要解决。

rebase 前:

![]( {{site.url}}/asset/git-tips-before-rebase.png )

rebase 后:

![]( {{site.url}}/asset/git-rebase-after.png )

可以看到 rebase 之后 feature 分支的所有提交都排到了 master 分支前面，并且 commit id 发生了变化。这时候再切回 master 进行 merge 操作：

```
git checkout master
git merge --no-ff feature_01
```

就会生成如下记录：

![]( {{site.url}}/asset/git-tips-merge-after-rebase.png )

从 master 分支看来，feature 分支的开发就像是串行开发一样，更容易理解一些。

不过 rebase 还是要慎用，因为会修改原先的 commit, 不小心搞错了可能比较麻烦吧。。。

参考自 [这篇文章](http://hungyuhei.github.io/2012/08/07/better-git-commit-graph-using-pull---rebase-and-merge---no-ff.html)


## zsh 查看 git log 的问题

在 mac 上用了 zsh 之后，发现每次查看 git log 都会打开一个类似于 vi 的编辑界面，而不是向以前用 bash 那样直接展示到命令行里面。有时候需要复制一些 commit id 不太方便。

一开始查没找到怎么设置，以为是 zsh 的问题。感谢同事发现了设置的方法:

```
git config --global --replace-all core.pager "less -F -X"
```

可以看到，其实是要设置 git 的 core.paper, 其中 less 是一个命令行下的查看工具, -F 表示如果屏幕可以容纳得下内容，就把内容直接打印到屏幕，而不是在 less 里展示, -X 表示强制展示到屏幕(大概是这个意思)。

设置完毕后 git log 就可以直接展示到 zsh 命令行里了。


## Git 当中的 remote 和 upstream

执行 `git remote -v` 可以检查仓库目前有哪些 remote:

```s
$ git remote -v
origin	git@github.com:Dong-dada/colorful-torrent.git (fetch)
origin	git@github.com:Dong-dada/colorful-torrent.git (push)
```

简单来说 remote 表示一个远程远程仓库，origin 是名字，后面的是 url。

如果你在本地 init 出来一个仓库，这时候执行 `git remote -v` 是查不出来东西的，因为这个本地仓库没有跟任何远程仓库建立关联。

执行 `git remote add` 命令就可以添加一个远程仓库。

```s
# 添加远程仓库，并将其命名为 origin
$ git remote add origin git@github.com:Dong-dada/colorful-torrent.git
```

这时候就可以从远程仓库拉到代码了。

在本地创建一个分支，然后执行以下命令把这个分支 push 到远程仓库:

```s
$ git push origin feature-xxx:feature-xxx
```

这个时候执行 git pull 拉代码是拉不到的，因为本地分支和远程分支没有关联，这时候就需要执行 `git push --set-upstream` 命令来建立这种关联：

```s
# 让当前分支跟踪 origin 远程仓库的 feature-xxx 分支
$ git push --set-upstream origin feature-xxx
```

remote, upstream 这些知识不仅用在创建仓库、创建分支这些场景下，也可用在代码合并的场景下。比如有个项目，既有开源代码维护在 github, 也有内部代码维护在公司的 gitlab 上。这时候就可以给本地仓库添加两个 remote, 在创建分支的时候也可以让不同的分支追踪不同的远程仓库分支。