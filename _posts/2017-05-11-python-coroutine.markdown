---
layout: post
title:  "Python 协程"
date:   2017-05-11 10:19:30 +0800
categories: python
---

* TOC
{:toc}

最近在尝试使用 python 开发 web app, 接触到了 asyncio 模块的代码，其中有一部分涉及协程 coroutine 知识。之前学 python 的时候这部分没有好好看，因为之前在 lua 里就学过协程，结果实际工作中很少用到。没想到协程这个东西在 python 里其实有许多用处，所以收集点资料总结一下好了。

首先协程的英文 coroutine, 应该分解为 co-routine, 前面的 co 表示合作、协作，后面的 routine 表示 例程。

例程这个概念在 Windows 编程里接触过，比如 ReadFileEx 这个 API 的最后一个参数名叫 pfnCompletionRoutine, 在文件读取完毕后，会执行这个例程，这里的例程指的是一个函数。

把函数等同于例程可能不太恰当，我觉得例程更准确的意思是 “子任务“。那么 coroutine 就可以翻译为 协作的子任务。

这里的 “协作” 体现在，它会执行一段时间就交出执行权，让其他的任务有机会执行，而不是一直独占着执行权直到任务执行完毕。这个跟操作系统的发展史有点儿类似，上古的操作系统只是对硬件做了封装，运行于其中的任务是独占式的，必须在这个任务执行结束之后，其他任务才有机会执行；后来又出现了协作式的操作系统，任务可以在运行期间主动交出执行权，让其他任务有机会能够执行；再后来就是抢占式多任务了，由操作系统为任务分配时间片，跟这儿说的协程就没啥关系了。

思考一下，协程与普通的子任务相比，有哪些优点？工作方式有什么不同？